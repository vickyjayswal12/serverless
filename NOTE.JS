
// what services provided to aws lambda function by default  into serveless framwork after deploy

// When deploying AWS Lambda functions using the Serverless Framework, several AWS services are provided to Lambda functions by default. These services are integral to the Serverless Framework's functionality and facilitate the deployment, operation, and scaling of serverless applications. Here are some of the key services provided:

// 1. **AWS Lambda**:
//    Serverless Framework deploys your Lambda functions to AWS Lambda, allowing you to execute code without provisioning or managing servers.

// 2. **API Gateway**:
//    API Gateway is often automatically provisioned by Serverless Framework to create HTTP endpoints that trigger your Lambda functions. This allows you to create RESTful APIs for your serverless applications.

// 3. **CloudFormation**:
//    Serverless Framework uses AWS CloudFormation under the hood to manage the infrastructure deployment. CloudFormation allows you to define your infrastructure as code (IaC) using YAML or JSON templates and provision resources in a predictable and repeatable manner.

// 4. **IAM Roles**:
//    Serverless Framework creates IAM roles for your Lambda functions with the necessary permissions to interact with other AWS services. These IAM roles are specified in your `serverless.yml` configuration file and are used to define the access control policies for your Lambda functions.

// 5. **CloudWatch Logs**:
//    Serverless Framework automatically integrates your Lambda functions with CloudWatch Logs, allowing you to monitor and troubleshoot your serverless applications by viewing logs generated by your Lambda functions.

// 6. **S3 Bucket for Deployment Artifacts**:
//    When you deploy your serverless application, Serverless Framework uploads the deployment artifacts (e.g., Lambda function code, CloudFormation templates) to an S3 bucket. This S3 bucket is managed by Serverless Framework and is used to store the deployment artifacts during the deployment process.

// 7. **Event Sources**:
//    Serverless Framework provides integrations with various AWS event sources, such as S3, DynamoDB, SNS, SQS, etc., allowing you to trigger your Lambda functions in response to events from these services. These event sources are configured in your `serverless.yml` file.

// 8. **Auto Scaling**:
//    AWS Lambda automatically scales your functions in response to incoming traffic. Serverless Framework leverages Lambda's auto-scaling capabilities to ensure that your serverless applications can handle varying workloads.

// These are some of the key services provided to AWS Lambda functions by default when deploying serverless applications using the Serverless Framework. Additionally, you can customize and extend your serverless applications by integrating with other AWS services and third-party plugins supported by the Serverless Framework.






// which services have permission with apigateway after deploy
// After deploying your Serverless application with API Gateway as the trigger for your Lambda functions, several AWS services interact to enable the functionality. Here are the main ones:

// 1. **API Gateway**: This service manages the API endpoints and routes requests to your Lambda functions based on the configured HTTP methods and paths.

// 2. **Lambda**: Your Lambda functions handle the business logic of your application. API Gateway triggers these functions in response to incoming HTTP requests.

// 3. **IAM (Identity and Access Management)**: IAM manages permissions for AWS services and resources. After deployment, IAM grants API Gateway permission to invoke your Lambda functions. This permission is typically managed automatically by Serverless Framework when deploying your service.

// 4. **CloudWatch**: CloudWatch logs are generated for the Lambda functions. You can monitor and troubleshoot your Lambda functions using these logs.

// 5. **CloudFormation**: Serverless Framework uses CloudFormation under the hood to manage and provision AWS resources. CloudFormation templates are generated based on your serverless.yml configuration file, and they define the infrastructure required for your application, including API Gateway resources.

// These are the primary services involved in the interaction after deploying a Serverless application with API Gateway triggering Lambda functions. Each service plays a crucial role in enabling the functionality and ensuring that your application operates smoothly.